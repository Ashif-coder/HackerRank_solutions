'''
Jack and Daniel are friends. Both of them like letters, especially uppercase ones.
They are cutting uppercase letters from newspapers, and each one of them has his collection of letters stored in a stack.
One beautiful day, Morgan visited Jack and Daniel. He saw their collections. He wondered what is the lexicographically minimal string made 
of those two collections. He can take a letter from a collection only when it is on the top of the stack. Morgan wants to use all of the
 letters in their collections.
'''

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'morganAndString' function below.
#
# The function is expected to return a STRING.
# The function accepts following parameters:
#  1. STRING a
#  2. STRING b
#

def morganAndString(a, b):
    la = len(a)
    lb = len(b)
    a += "z"
    b += "z"
    i = j = 0
    res = ""
    while (i != la and j != lb):
        if a[i:] < b[j:]:
            res += a[i]
            i += 1
        else:
            res += b[j]
            j += 1
        
    res += a[i: -1] + b[j: -1]
    return res

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input().strip())

    for t_itr in range(t):
        a = input()

        b = input()

        result = morganAndString(a, b)

        fptr.write(result + '\n')

    fptr.close()

'''
Explaination

* Initialize variables la and lb to store the lengths of strings 'a' and 'b', respectively.
* Append a character 'z' to both 'a' and 'b' to ensure proper string comparison during merging.
* Initialize two pointers, i and j, to keep track of the current positions within 'a' and 'b', respectively.
* Initialize an empty string res to store the resulting merged string.
* Iterate through both 'a' and 'b' while comparing the remaining unprocessed portions.
* In each iteration, compare the remaining substrings starting from 'i' in 'a' and 'j' in 'b'.
* Append the smaller of the two substrings to the result string res.
* Increment the corresponding pointer (i or j) to the next character for the chosen substring.
* After the loop, concatenate any remaining characters in 'a' (excluding the appended 'z') and 'b' (excluding the appended 'z') to the result string res.
* The function returns the merged lexicographically minimal string res.

'''
