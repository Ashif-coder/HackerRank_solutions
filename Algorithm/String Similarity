'''
For two strings A and B, we define the similarity of the strings to be the length of the longest prefix common to both strings. 
For example, the similarity of strings "abc" and "abd" is 2, while the similarity of strings "aaa" and "aaab" is 3.

Calculate the sum of similarities of a string S with each of it's suffixes.
'''

#!/bin/python3

import math
import os
import random
import re
import sys


def stringSimilarity(s):
    n = len(s)
    z = [0] * n
    l, r = 0, 0

    for i in range(1, n):
        if i <= r:
            z[i] = min(r - i + 1, z[i - l])
        while i + z[i] < n and s[z[i]] == s[i + z[i]]:
            z[i] += 1
        if i + z[i] - 1 > r:
            l, r = i, i + z[i] - 1

    return sum(z) + n

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input().strip())

    for _ in range(t):
        s = input().strip()
        result = stringSimilarity(s)
        fptr.write(str(result) + '\n')

    fptr.close()


'''
Explaination
The stringSimilarity function computes a list z where z[i] represents the length of the longest common prefix between S and the suffix starting at index i.
It iterates through the string S to calculate the z values.
The result is the sum of all z values plus the length of the original string.
'''
