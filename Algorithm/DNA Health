'''
DNA is a nucleic acid present in the bodies of living things. Each piece of DNA contains a number of genes, some of which are beneficial and increase the DNA's total health.
Each gene has a health value, and the total health of a DNA is the sum of the health values of all the beneficial genes that occur as a substring in the DNA. We represent genes
and DNA as non-empty strings of lowercase English alphabetic letters, and the same gene may appear multiple times as a susbtring of a DNA.

'''

from collections import defaultdict
from math import inf

def bLeft(arr, val):
    l, r = 0, len(arr)
    while l < r:
        mid = (l + r) // 2
        if arr[mid] >= val:
            r = mid
        else:
            l = mid + 1
    return l

def bRight(arr, val):
    l, r = 0, len(arr)
    while l < r:
        mid = (l + r) // 2
        if arr[mid] > val:
            r = mid
        else:
            l = mid + 1
    return l

def getHealth(seq, first, last, largest):
    h, ls = 0, len(seq)
    for f in range(ls):
        for j in range(1, largest + 1):
            if f + j > ls:
                break
            sub = seq[f:f + j]
            if sub not in subs:
                break
            if sub not in gMap:
                continue
            ids, hs = gMap[sub]
            h += hs[bRight(ids, last)] - hs[bLeft(ids, first)]
    return h

if __name__ == "__main__":
    howGenes = int(input())
    genes = input().rstrip().split()
    healths = list(map(int, input().rstrip().split()))
    howStrands = int(input())
    gMap = defaultdict(lambda: [[], [0]])
    subs = set()
    for id, gene in enumerate(genes):
        gMap[gene][0].append(id)
        for j in range(1, min(len(gene), 500) + 1):
            subs.add(gene[:j])
    for v in gMap.values():
        for i, ix in enumerate(v[0]):
            v[1].append(v[1][i] + healths[ix])

    largest = max(list(map(len, genes)))
    hMin, hMax = inf, 0

    for _ in range(howStrands):
        firstLastd = input().split()
        first = int(firstLastd[0])
        last = int(firstLastd[1])
        strand = firstLastd[2]
        h = getHealth(strand, first, last, largest)
        hMin, hMax = min(hMin, h), max(hMax, h)

    print(hMin, hMax)

#Explaination
'''
We want to calculate the health of various DNA strands.
Each DNA strand is made up of a sequence of genes.

Calculating DNA Health:
To find the health of a DNA strand, we check which genes from the list are present in that strand.
We add up the health values of the genes in the DNA strand.
The more beneficial genes, the higher the health of the DNA.

Minimum and Maximum Health:
We calculate the minimum and maximum health values across all the DNA strands and print it.


'''
