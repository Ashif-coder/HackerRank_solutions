'''
DNA is a nucleic acid present in the bodies of living things. Each piece of DNA contains a number of genes, some of which are beneficial and increase the DNA's total health.
Each gene has a health value, and the total health of a DNA is the sum of the health values of all the beneficial genes that occur as a substring in the DNA. We represent genes
and DNA as non-empty strings of lowercase English alphabetic letters, and the same gene may appear multiple times as a susbtring of a DNA.

'''

from collections import defaultdict
from math import inf

def bLeft(arr, val):
    l, r = 0, len(arr)
    while l < r:
        mid = (l + r) // 2
        if arr[mid] >= val:
            r = mid
        else:
            l = mid + 1
    return l

def bRight(arr, val):
    l, r = 0, len(arr)
    while l < r:
        mid = (l + r) // 2
        if arr[mid] > val:
            r = mid
        else:
            l = mid + 1
    return l

def getHealth(seq, first, last, largest):
    h, ls = 0, len(seq)
    for f in range(ls):
        for j in range(1, largest + 1):
            if f + j > ls:
                break
            sub = seq[f:f + j]
            if sub not in subs:
                break
            if sub not in gMap:
                continue
            ids, hs = gMap[sub]
            h += hs[bRight(ids, last)] - hs[bLeft(ids, first)]
    return h

if __name__ == "__main__":
    howGenes = int(input())
    genes = input().rstrip().split()
    healths = list(map(int, input().rstrip().split()))
    howStrands = int(input())
    gMap = defaultdict(lambda: [[], [0]])
    subs = set()
    for id, gene in enumerate(genes):
        gMap[gene][0].append(id)
        for j in range(1, min(len(gene), 500) + 1):
            subs.add(gene[:j])
    for v in gMap.values():
        for i, ix in enumerate(v[0]):
            v[1].append(v[1][i] + healths[ix])

    largest = max(list(map(len, genes)))
    hMin, hMax = inf, 0

    for _ in range(howStrands):
        firstLastd = input().split()
        first = int(firstLastd[0])
        last = int(firstLastd[1])
        strand = firstLastd[2]
        h = getHealth(strand, first, last, largest)
        hMin, hMax = min(hMin, h), max(hMax, h)

    print(hMin, hMax)

#Explaination
'''

Binary Search Functions (bLeft and bRight):

bLeft and bRight are binary search functions. They take a sorted array arr and a value val as input.
bLeft returns the leftmost index where the value is greater than or equal to val.
bRight returns the leftmost index where the value is strictly greater than val.
getHealth Function:

getHealth calculates the total health value of a DNA strand (seq) within a specified range of genes.
It uses nested loops to iterate through all possible substrings of the DNA strand.
For each substring, it checks if it exists in the subs set, and if it does, it looks up the health values associated with that gene using the gMap dictionary.
It calculates the health value of the DNA strand by taking the difference between the cumulative health values of the genes within the specified range (first to last).
The total health value is accumulated and returned.
Main Block:

The code execution starts in the main block, which reads input from the user.
Input Processing:

The code reads the following input:
The number of genes, howGenes.
The genes as a space-separated string, genes.
The health values of the genes as a space-separated list of integers, healths.
The number of DNA strands, howStrands.
Data Structures Initialization:

The code initializes two data structures:
gMap: A defaultdict that maps genes to their indices and cumulative health values.
subs: A set to store gene substrings.
Populating gMap and subs:

The code then iterates through the genes and creates entries in gMap for each gene. It also populates subs with substrings of the genes.
It calculates the cumulative health values of each gene's substring and stores them in the gMap.
Determine the Largest Gene:

The code calculates the length of the largest gene in the genes list and stores it in largest.
Iterating through DNA Strands:

The code enters a loop to process each DNA strand.
For each strand, it reads the first and last values, as well as the DNA strand itself.
It calls the getHealth function to calculate the health value of the DNA strand within the specified gene range.
It keeps track of the minimum and maximum health values (hMin and hMax) across all DNA strands.
Output:

Finally, the code prints the minimum and maximum health values (hMin and hMax) across all DNA strands.

'''
